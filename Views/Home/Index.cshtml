<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-Time Chat with User Status</title>


    <style>
        .status-dot {
            height: 10px;
            width: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .online {
            background-color: green;
        }

        .offline {
            background-color: red;
        }

        .chatbox {
            /* background: darkgray; */
            /* height: 35px; */
            border-radius: 10px;
            font-size: 18px;
            padding: 3px 10px 1;
        }

        .liBulletHide {
            list-style-type: none;
        }
    </style>
</head>
<body>
    <div>
        <h1 class="text-center" style="line-height: 0.2;">
            Real-Time Chat
        </h1>
        <div class="row">
            <div class="col-md-4">
                <form class="radio-group">
                    <label>
                        <input type="radio" name="group1" value="0" checked onclick="handleRadioChange(0)">
                        Simple
                    </label>
                    <label>
                        <input type="radio" name="group1" value="1" onclick="handleRadioChange(1)">
                        Editor
                    </label>
                </form>

                <input type="text" id="userName" value="@ViewBag.UserName" hidden />
               @*  <input type="text" class="form-control" id="messageInput" placeholder="Type your message"></input>
                <div id="editorInput" style="display:none"></div>
                <button class="btn btn-primary btn-block mt-2" onclick="sendMessage()">Send</button>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <h3>Online Users</h3>

                    </div>
                </div> *@
            </div>
            <div class="col-md-12">
                @* <ul id="messagesList"></ul> *@
                <div class="chat">
                    <div class="chat-header clearfix">
                        <div class="row">
                            <div class="col-lg-6">
                                <a href="javascript:void(0);" data-toggle="modal" data-target="#view_info">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                                </a>
                                <div class="chat-about">
                                    <h6 class="m-b-0">@ViewBag.UserName</h6>
                                    <small><ul id="usersList"></ul></small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="chat-history">
                        <ul id="messagesList" class="m-b-0"></ul>
                    </div>
                    <div class="chat-message clearfix" style="position: fixed;bottom: 0;width: 97%;background-color: #fff;box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);padding: 10px;">
                        <div class="input-group mb-0">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fa fa-send" onclick="sendMessage()"></i></span>
                            </div>
                            <input type="text" id="messageInput" class="form-control" placeholder="Enter text here...">
                            <div id="editorInput" style="display:none" style="width:80%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>



    <script>
        function handleRadioChange(val) {
            if (val == 1) {
                $("#messageInput").css("display", "none");
                $("#editorInput").css("display", "");
                $(".ck.ck-reset.ck-editor.ck-rounded-corners").css("display", "")
            }
            else {
                $("#editorInput").css("display", "none");
                $(".ck.ck-reset.ck-editor.ck-rounded-corners").css("display", "none")
                $("#messageInput").css("display", "");
            }
        }

        // let editor = new FroalaEditor('#editorInput', {
        //     toolbarButtons: {
        //         moreText: {
        //             buttons: ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript'],
        //             buttonsVisible: 2
        //         },
        //         moreParagraph: {
        //             buttons: ['align', 'formatOL', 'formatUL', 'outdent', 'indent', 'paragraphFormat', 'quote', 'insertHR'],
        //             buttonsVisible: 0
        //         },
        //         moreRich: {
        //             buttons: ['insertLink', 'insertImage', 'insertVideo'],
        //             buttonsVisible: 3
        //         },
        //         moreMisc: {
        //             buttons: ['insertFile', 'insertTable'],
        //             buttonsVisible: 2
        //         },
        //         moreMisc: {
        //             buttons: ['undo', 'redo', 'fullscreen'],
        //             buttonsVisible: 3
        //         }
        //     },
        // }, function () {
        // })

        let editorInstance;

        CKEDITOR.ClassicEditor.create(document.getElementById("editorInput"), {
            // Your existing configuration
            toolbar: {
                items: [
                    'exportPDF', 'exportWord', '|',
                    'findAndReplace', 'selectAll', '|',
                    'heading', '|',
                    'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',
                    'outdent', 'indent', '|',
                    'undo', 'redo',
                    '-',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                    'alignment', '|',
                    'link', 'uploadImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                    'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                    'textPartLanguage', '|',
                    'sourceEditing'
                ],
                shouldNotGroupWhenFull: true
            },
            list: {
                properties: {
                    styles: true,
                    startIndex: true,
                    reversed: true
                }
            },
            heading: {
                options: [
                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                    { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                    { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                    { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                    { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                    { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                    { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
                ]
            },
            placeholder: 'Welcome to CKEditor 5!',
            fontFamily: {
                options: [
                    'default',
                    'Arial, Helvetica, sans-serif',
                    'Courier New, Courier, monospace',
                    'Georgia, serif',
                    'Lucida Sans Unicode, Lucida Grande, sans-serif',
                    'Tahoma, Geneva, sans-serif',
                    'Times New Roman, Times, serif',
                    'Trebuchet MS, Helvetica, sans-serif',
                    'Verdana, Geneva, sans-serif'
                ],
                supportAllValues: true
            },
            fontSize: {
                options: [10, 12, 14, 'default', 18, 20, 22],
                supportAllValues: true
            },
            htmlSupport: {
                allow: [
                    {
                        name: /.*/,
                        attributes: true,
                        classes: true,
                        styles: true
                    }
                ]
            },
            htmlEmbed: {
                showPreviews: false
            },
            link: {
                decorators: {
                    addTargetToExternalLinks: true,
                    defaultProtocol: 'https://',
                    toggleDownloadable: {
                        mode: 'manual',
                        label: 'Downloadable',
                        attributes: {
                            download: 'file'
                        }
                    }
                }
            },
            removePlugins: [
                'AIAssistant',
                'CKBox',
                'CKFinder',
                'EasyImage',
                'MultiLevelList',
                'RealTimeCollaborativeComments',
                'RealTimeCollaborativeTrackChanges',
                'RealTimeCollaborativeRevisionHistory',
                'PresenceList',
                'Comments',
                'TrackChanges',
                'TrackChangesData',
                'RevisionHistory',
                'Pagination',
                'WProofreader',
                'MathType',
                'SlashCommand',
                'Template',
                'DocumentOutline',
                'FormatPainter',
                'TableOfContents',
                'PasteFromOfficeEnhanced',
                'CaseChange'
            ]
        }).then(editor => {
            editorInstance = editor;
        }).catch(error => {
            console.error(error);
        });

        function getEditorData() {
            if (editorInstance) {
                return editorInstance.getData();
            }
        }


        setTimeout(function () { $(".ck.ck-reset.ck-editor.ck-rounded-corners").css("display", "none") }, 10);


        document.addEventListener("keypress", function (event) {
            if (event.keyCode === 13 && document.querySelector('input[name="group1"]:checked').value == '0') {
                sendMessage();
            }
        });
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.on("ReceiveMessage", (user, message, isOnline) => {
            const curruser = document.getElementById("userName").value;
            const msg = document.createElement("li");
            msg.classList.add("clearfix");
            if (curruser === user) {
                msg.innerHTML = `<div class="message other-message float-right">${message}</div>`;
            }
            else {
                msg.innerHTML = `<div class="message-data"><span class="message-data-time">${user}</span></div><div class="message my-message">${message}</div>`;
            }
            msg.classList.add('chatbox');
            document.getElementById("messagesList").appendChild(msg);
            var messagesList = document.getElementById('messagesList');
            messagesList.scrollTop = messagesList.scrollHeight;
        });

        connection.on("UpdateUserList", (users) => {
            const usersList = document.getElementById("usersList");
            usersList.innerHTML = "";
            users.forEach(user => {
                const userItem = document.createElement("li");
                userItem.innerHTML = `<span class="status-dot online"></span>${user}`;
                usersList.appendChild(userItem);
            });
        });

        connection.on("UserConnected", (user) => {
            const usersList = document.getElementById("usersList");
            const userItem = document.createElement("li");
            userItem.innerHTML = `<span class="status-dot online"></span>${user}`;
            usersList.appendChild(userItem);
        });

        connection.on("UserDisconnected", (user) => {
            const usersList = document.getElementById("usersList");
            const userItems = usersList.getElementsByTagName("li");
            for (let i = 0; i < userItems.length; i++) {
                if (userItems[i].textContent.includes(user)) {
                    userItems[i].querySelector(".status-dot").className = "status-dot offline";
                }
            }
        });

        connection.start().catch(err => console.error(err.toString()));

        function sendMessage() {
            const messageInput = document.querySelector('input[name="group1"]:checked').value == '1' ? getEditorData() : document.getElementById("messageInput").value.trim();
            if (messageInput !== '') {
                const userName = document.getElementById("userName").value; // Replace with actual user name logic
                connection.invoke("SendMessage", userName, messageInput).catch(err => console.error(err.toString()));
                document.getElementById("messageInput").value = '';
                editorInstance.setData('');
            } else {
                alert("Please enter a message.");
            }
        }
        setTimeout(function () {
            var divToRemove2 = document.querySelector('div[style*="position: fixed; z-index: 2147483647; left: 0px; bottom: 0px; height: 65px; right: 0px; display: block; width: 100%; background-color: transparent; margin: 0px; padding: 0px;"]');

            // Check if the div exists and remove it
            if (divToRemove2) {
                divToRemove2.remove();
            }
        var divToRemove = document.querySelector('div[style*="opacity: 0.9; z-index: 2147483647; position: fixed; left: 0px; bottom: 0px; height: 65px; right: 0px; display: block; width: 100%; background-color: #202020; margin: 0px; padding: 0px;"]');

        // Check if the div exists and remove it
        if (divToRemove) {
            divToRemove.remove();
        }
            // Select the <center> element containing the specific link
            var centerToRemove = document.querySelector('center a[href="http://somee.com"]');

            // Check if the <a> element exists and remove its parent <center>
            if (centerToRemove) {
                centerToRemove.parentNode.remove();
            }
        }, 1000);
    </script>
</body>
</html>
