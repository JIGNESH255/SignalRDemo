<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-Time Chat with User Status</title>
    

    <style>
        .status-dot {
            height: 10px;
            width: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .online {
            background-color: green;
        }

        .offline {
            background-color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center">Real-Time Chat</h1>
        <div class="row">
            <div class="col-md-12">
                <form class="radio-group">
                    <label>
                        <input type="radio" name="group1" value="0" checked onclick="handleRadioChange(0)">
                       Simple
                    </label>
                    <label>
                        <input type="radio" name="group1" value="1" onclick="handleRadioChange(1)">
                        Editor
                    </label>
                </form>

                <input type="text" id="userName" value="@ViewBag.UserName" hidden />
                <input type="text" class="form-control" id="messageInput" placeholder="Type your message"></input>
                <div id="editorInput" style="display:none"></div>
                <button class="btn btn-primary btn-block mt-2" onclick="sendMessage()">Send</button>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-12">
                <h3>Online Users</h3>
                <ul id="usersList"></ul>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-12">
                <ul id="messagesList"></ul>
            </div>
        </div>
    </div>



    <script>
        function handleRadioChange(val) { 
            if (val == 1) {
                $("#messageInput").css("display", "none");
                $("#editorInput").css("display", "");
            }
            else {
                $("#editorInput").css("display", "none");
                $("#messageInput").css("display", "");
            }
        }
        let editor = new FroalaEditor('#editorInput', {
            toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'fontFamily', 'fontSize', 'color', 'backgroundColor', '|', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'paragraphFormat', 'quote', 'insertHR', '|', 'insertLink', 'insertImage', 'insertVideo', 'insertFile', 'insertTable', '|', 'undo', 'redo', 'fullscreen'],
        }, function () {
        })
       
        document.addEventListener("keypress", function (event) {
            if (event.keyCode === 13 && document.querySelector('input[name="group1"]:checked').value == '0') {
                sendMessage();
            }
        });
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.on("ReceiveMessage", (user, message, isOnline) => {
            const msg = document.createElement("li");
            msg.innerHTML = `<span></span>${user}: ${message}`;// class="status-dot ${isOnline ? 'online' : 'offline'}"

            const firstMessage = document.getElementById("messagesList").firstChild;
            document.getElementById("messagesList").insertBefore(msg, firstMessage);
        });

        connection.on("UpdateUserList", (users) => {
            const usersList = document.getElementById("usersList");
            usersList.innerHTML = "";
            users.forEach(user => {
                const userItem = document.createElement("li");
                userItem.innerHTML = `<span class="status-dot online"></span>${user}`;
                usersList.appendChild(userItem);
            });
        });

        connection.on("UserConnected", (user) => {
            const usersList = document.getElementById("usersList");
            const userItem = document.createElement("li");
            userItem.innerHTML = `<span class="status-dot online"></span>${user}`;
            usersList.appendChild(userItem);
        });

        connection.on("UserDisconnected", (user) => {
            const usersList = document.getElementById("usersList");
            const userItems = usersList.getElementsByTagName("li");
            for (let i = 0; i < userItems.length; i++) {
                if (userItems[i].textContent.includes(user)) {
                    userItems[i].querySelector(".status-dot").className = "status-dot offline";
                }
            }
        });

        connection.start().catch(err => console.error(err.toString()));

        function sendMessage() {
            const messageInput = document.querySelector('input[name="group1"]:checked').value == '1' ? editor.html.get() : document.getElementById("messageInput").value.trim();
            if (messageInput !== '') {
                const userName = $("#userName").val(); // Replace with actual user name logic
                connection.invoke("SendMessage", userName, messageInput).catch(err => console.error(err.toString()));
                document.getElementById("messageInput").value = '';
                editor.html.set(null)
            } else {
                alert("Please enter a message.");
            }
        }
    </script>
</body>
</html>
